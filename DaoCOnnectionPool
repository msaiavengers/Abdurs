import psycopg2
import psycopg2.pool
from psycopg2.extras import RealDictCursor
from contextlib import contextmanager

class TcaHubDAO:
    # Initialize connection pool
    _connection_pool = psycopg2.pool.SimpleConnectionPool(
        minconn=1,  # Minimum connections
        maxconn=10,  # Maximum connections
        dbname=DB_NAME,
        user=DB_USER,
        host=DB_HOST,
        port=DB_PORT,
        sslmode='require',
        sslcert=MTLS_CERT_PATH,
        sslkey=MTLS_KEY_PATH,
        sslrootcert=MTLS_ROOT_CERT_PATH,
        options=f'-c search_path={DB_SCHEMA}'
    )

    @staticmethod
    @contextmanager
    def get_db_connection():
        """Fetch a connection from the pool and return it when done."""
        conn = TcaHubDAO._connection_pool.getconn()
        try:
            yield conn
        finally:
            TcaHubDAO._connection_pool.putconn(conn)  # Return to pool

    @staticmethod
    def create_view(view_name, view_template, owner_id, view_type):
        """Create a new view in the database and return the generated view ID."""
        with TcaHubDAO.get_db_connection() as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cursor:
                cursor.execute(
                    """
                    INSERT INTO tcahub_views (view_name, view_template, owner_id, view_type)
                    VALUES (%s, %s, %s, %s) RETURNING view_id;
                    """,
                    (view_name, json.dumps(view_template), owner_id, view_type)
                )
                conn.commit()
                result = cursor.fetchone()
                return result["view_id"] if result else None
