import os
import psycopg2
from psycopg2.extras import RealDictCursor
from dotenv import load_dotenv

# Load environment variables from the .env file
load_dotenv()

# Database configuration pulled from environment variables
DB_NAME = os.getenv("pgdb")
DB_USER = os.getenv("pguser")
DB_HOST = os.getenv("pghost")
DB_PORT = os.getenv("pgport")
DB_PASSWORD = os.getenv("PGPASSWORD")
MTLS_CERT_PATH = os.getenv("pgcert")
MTLS_KEY_PATH = os.getenv("pgkey")
MTLS_ROOT_CERT_PATH = os.getenv("pgrootpath")
DB_SCHEMA = os.getenv("pgschema")

class TcaHubDAO:
    @staticmethod
    def get_db_connection():
        # Return a connection to the database using the provided credentials
        return psycopg2.connect(
            dbname=DB_NAME,
            user=DB_USER,
            host=DB_HOST,
            port=DB_PORT,
            sslmode='require',
            sslcert=MTLS_CERT_PATH,
            sslkey=MTLS_KEY_PATH,
            sslrootcert=MTLS_ROOT_CERT_PATH,
            cursor_factory=RealDictCursor,
            options=f'-c search_path={DB_SCHEMA}'
        )

    @staticmethod
    def create_view(view_name, view_template, owner_id, view_type):
        # Insert a new view into the database and return its ID
        with TcaHubDAO.get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    """
                    INSERT INTO tcahub_views (view_name, view_template, owner_id, view_type)
                    VALUES (%s, %s, %s, %s) RETURNING view_id;
                    """,
                    (view_name, view_template, owner_id, view_type)
                )
                conn.commit()
                return cursor.fetchone()["view_id"]

    @staticmethod
    def get_view(view_id):
        # Retrieve a single view by its ID
        with TcaHubDAO.get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT * FROM tcahub_views WHERE view_id = %s;", (view_id,))
                return cursor.fetchone()

    @staticmethod
    def get_views_by_owner(owner_id):
        # Get all views owned by a specific user
        with TcaHubDAO.get_db_connection() as conn:
          with conn.cursor() as cursor:
              cursor.execute("SELECT * FROM tcahub_views WHERE owner_id = %s;", (owner_id,))
              return cursor.fetchall()

    @staticmethod
    def update_view(view_id, view_name=None, view_template=None, view_type=None):
        # Update a view's details based on the provided parameters
        with TcaHubDAO.get_db_connection() as conn:
            with conn.cursor() as cursor:
                updates = []
                params = []
                if view_name:
                    updates.append("view_name = %s")
                    params.append(view_name)
                if view_template:
                    updates.append("view_template = %s")
                    params.append(view_template)
                if view_type:
                    updates.append("view_type = %s")
                    params.append(view_type)
                params.append(view_id)
                
                if updates:
                    query = f"UPDATE tcahub_views SET {', '.join(updates)}, updated_at = NOW() WHERE view_id = %s"
                    cursor.execute(query, tuple(params))
                    conn.commit()
                    return cursor.rowcount > 0
                return False

    @staticmethod
    def delete_view(view_id):
        # First, check if there are any shares linked to the view
        shares = TcaHubDAO.get_shares_for_view(view_id)
        if shares:
            # If there are shares, inform the user and ask them to delete those first
            shared_users_groups = ", ".join([f"{share['target_type']}: {share['shared_to']}" for share in shares])
            return f"Cannot delete view. Please delete the following shares first: {shared_users_groups}"

        # If no shares exist, let's proceed and delete the shares for the view
        TcaHubDAO.delete_shares_for_view(view_id)

        # Now, we can safely delete the view itself
        with TcaHubDAO.get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("DELETE FROM tcahub_views WHERE view_id = %s;", (view_id,))
                conn.commit()
                return cursor.rowcount > 0

    @staticmethod
    def get_shares_for_view(view_id):
        # Look up all the shares related to this specific view
        with TcaHubDAO.get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT shared_to, target_type FROM tca.view_shares WHERE view_id = %s;", (view_id,))
                shares = cursor.fetchall()
                return shares

    @staticmethod
    def delete_shares_for_view(view_id):
        # Delete all shares associated with the given view ID
        with TcaHubDAO.get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("DELETE FROM tca.view_shares WHERE view_id = %s;", (view_id,))
                conn.commit()
                return cursor.rowcount > 0

    @staticmethod
    def share_view(view_id, shared_to, target_type):
        # Create a new share entry to share a view with a user or group
        with TcaHubDAO.get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    """
                    INSERT INTO view_shares (view_id, shared_to, target_type)
                    VALUES (%s, %s, %s) RETURNING shared_id;
                    """,
                    (view_id, shared_to, target_type)
                )
                conn.commit()
                return cursor.fetchone()["shared_id"]
                       
    @staticmethod
    def get_shared_views(shared_to):
        # Get all views that have been shared with a specific user or group
        with TcaHubDAO.get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT * FROM view_shares WHERE shared_to = %s;", (shared_to,))
                return cursor.fetchall()

    @staticmethod
    def revoke_share(shared_id):
        # Revoke a specific share using the shared_id
        with TcaHubDAO.get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("DELETE FROM view_shares WHERE shared_id = %s;", (shared_id,))
                conn.commit()
                return cursor.rowcount > 0

