
-- if we have view with no shares then the left join we could end up with view_id when evaluting the rtresults - as we nned to pick up the view_id form tcahub_vews
@staticmethod
def _fetch_view_details(cursor, where_clause, params):
    """
    Generalized method to fetch view details with a flexible WHERE clause.
    
    :param cursor: Database cursor
    :param where_clause: SQL WHERE clause string
    :param params: Parameters for the query
    :return: Single view or list of views with their shares
    """
    # Combined query to fetch view details along with their associated shares
    view_query = f"""
        SELECT v.view_id AS v_id, v.view_name, v.view_template, v.owner_id, 
               v.created_at, v.updated_at, v.type,
               vs.shared_id, vs.shared_to, vs.target_type, vs.shared_at
        FROM tcahub_views v
        LEFT JOIN view_shares vs ON v.view_id = vs.view_id
        WHERE {where_clause}
    """
    cursor.execute(view_query, params)
    results = cursor.fetchall()
    
    # If no results found, return empty list
    if not results:
        return []
    
    # Process results to group shares by view
    views_with_shares = {}
    for row in results:
        view_id = row['v_id']  # Ensure we always reference view_id from tcahub_views
        
        if view_id not in views_with_shares:
            views_with_shares[view_id] = {
                'view_id': view_id,
                'view_name': row['view_name'],
                'view_template': row['view_template'],
                'owner_id': row['owner_id'],
                'created_at': row['created_at'],
                'updated_at': row['updated_at'],
                'type': row['type'],
                'shares': []
            }
        
        # Check if there is valid share data before appending
        if row['shared_id'] is not None:
            share = {
                'shared_id': row['shared_id'],
                'shared_to': row['shared_to'],
                'target_type': row['target_type'],
                'shared_at': row['shared_at']
            }
            views_with_shares[view_id]['shares'].append(share)
    
    # Convert the grouped views dictionary to a list and return
    return list(views_with_shares.values())


@staticmethod
def delete_view(view_id):
    """Delete a view only after deleting all its associated shares."""
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                # Debug log before deleting shares
                logger.debug(f"Attempting to delete shares for view {view_id}")
                cursor.execute("DELETE FROM view_shares WHERE view_id = %s;", (view_id,))
                
                # Log the number of shares deleted
                shares_deleted = cursor.rowcount
                logger.debug(f"Deleted {shares_deleted} shares for view {view_id}")

                # Now, delete the view
                logger.debug(f"Attempting to delete view {view_id}")
                cursor.execute("DELETE FROM tcahub_views WHERE view_id = %s;", (view_id,))
                
                # Log the number of views deleted
                view_deleted = cursor.rowcount
                logger.debug(f"Deleted {view_deleted} view(s) with ID {view_id}")
                
                # Commit the changes
                conn.commit()

                # Return True if the view was deleted
                if view_deleted > 0:
                    logger.info(f"Successfully deleted view {view_id} and associated shares.")
                    return True
                else:
                    logger.warning(f"View {view_id} was not found or already deleted.")
                    return False

    except Exception as e:
        # Log the error
        logger.error(f"Error deleting view {view_id}: {e}")
        
        # Since the connection is managed by `with`, rollback is handled automatically
        return False  # Return False if something goes wrong


--updated delete as no cascade OnDelete on the view_shares table on view_id col
@staticmethod
def delete_view(view_id):
    """Delete a view only after deleting all its associated shares."""
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                # First, delete associated shares
                cursor.execute("DELETE FROM view_shares WHERE view_id = %s;", (view_id,))

                # Now, delete the view
                cursor.execute("DELETE FROM tcahub_views WHERE view_id = %s;", (view_id,))
                
                conn.commit()
                return cursor.rowcount > 0  # Returns True if the view was deleted
    except Exception as e:
        logger.error(f"Error deleting view {view_id}: {e}")
        conn.rollback()  # Rollback if there's an error
        return False  # Return False if something goes wrong

@staticmethod
def delete_view(view_id):
    """Delete a view only after deleting all its associated shares."""
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                # First, delete associated shares
                cursor.execute("DELETE FROM view_shares WHERE view_id = %s;", (view_id,))

                # Now, delete the view
                cursor.execute("DELETE FROM tcahub_views WHERE view_id = %s;", (view_id,))
                
                conn.commit()
                return cursor.rowcount > 0  # Returns True if the view was deleted
    except Exception as e:
        logger.error(f"Error deleting view {view_id}: {e}")
        conn.rollback()  # Rollback if there's an error
        return False  # Return False if something goes wrong


before version not returning as a dict - below should trying 0it
@staticmethod
def get_view(view_id):
    """Fetch the details of a specific view by its ID."""
    with TcaHubDAO.get_db_connection() as conn:
        with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM tcahub_views WHERE view_id = %s;", (view_id,))
            result = cursor.fetchone()  # This should now return a dict
            return dict(result) if result else None  # Ensure it's a dictionary
 

--rfactored as we had repeating data
@staticmethod
def _fetch_view_details(cursor, where_clause, params):
    """
    Generalized method to fetch view details with a flexible WHERE clause.
    
    :param cursor: Database cursor
    :param where_clause: SQL WHERE clause string
    :param params: Parameters for the query
    :return: Single view or list of views with their shares
    """
    # Combined query to fetch view details along with their associated shares
    view_query = f"""
        SELECT v.view_id, v.view_name, v.view_template, v.owner_id, 
               v.created_at, v.updated_at, v.type,
               vs.shared_id, vs.shared_to, vs.target_type, vs.shared_at
        FROM tcahub_views v
        LEFT JOIN view_shares vs ON v.view_id = vs.view_id
        WHERE {where_clause}
    """
    cursor.execute(view_query, params)
    results = cursor.fetchall()
    
    # If no results found, return empty list
    if not results:
        return []
    
    # Process results to group shares by view
    views_with_shares = {}
    for row in results:
        view_id = row['view_id']
        if view_id not in views_with_shares:
            views_with_shares[view_id] = {
                'view_id': row['view_id'],
                'view_name': row['view_name'],
                'view_template': row['view_template'],
                'owner_id': row['owner_id'],
                'created_at': row['created_at'],
                'updated_at': row['updated_at'],
                'type': row['type'],
                'shares': []
            }
        
        # If there's share data, append it to the 'shares' list
        if row['shared_id']:
            share = {
                'shared_id': row['shared_id'],
                'shared_to': row['shared_to'],
                'target_type': row['target_type'],
                'shared_at': row['shared_at']
            }
            views_with_shares[view_id]['shares'].append(share)
    
    # Convert the grouped views dictionary to a list and return
    return list(views_with_shares.values())

@staticmethod
def get_view_with_shares(view_id):
    """Fetch a specific view along with its share details."""
    with TcaHubDAO.get_db_connection() as conn:
        with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            results = TcaHubDAO._fetch_view_details(cursor, "v.view_id = %s", (view_id,))
            # If a single view is fetched, return the first element, otherwise the list
            return results[0] if len(results) == 1 else results

@staticmethod
def get_views_with_shares_by_owner_id(owner_id):
    """Fetch all views owned by a user, including their share details."""
    with TcaHubDAO.get_db_connection() as conn:
        with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            return TcaHubDAO._fetch_view_details(cursor, "v.owner_id = %s", (owner_id,))

@staticmethod
def get_view(view_id):
    """Fetch the details of a specific view by its ID."""
    with TcaHubDAO.get_db_connection() as conn:
        with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM tcahub_views WHERE view_id = %s;", (view_id,))
            return cursor.fetchone()

@staticmethod
def get_views_by_owner(owner_id):
    """Get all views owned by a specific user based on the owner ID."""
    with TcaHubDAO.get_db_connection() as conn:
        with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM tcahub_views WHERE owner_id = %s;", (owner_id,))
            return cursor.fetchall()

--

@staticmethod
def _get_views_with_shares(where_clause, param):
    """Reusable method to fetch views with their share details."""
    with TcaHubDAO.get_db_connection() as conn:
        with conn.cursor() as cursor:
            query = f"""
                SELECT v.view_id, v.view_name, v.view_template, v.owner_id, v.created_at, v.updated_at, v.type,
                       vs.shared_id, vs.shared_to, vs.target_type, vs.shared_at
                FROM tcahub_views v
                LEFT JOIN view_shares vs ON v.view_id = vs.view_id
                WHERE {where_clause};
            """
            cursor.execute(query, (param,))
            return cursor.fetchall()

@staticmethod
def get_view_with_shares(view_id):
    """Fetch a specific view along with its share details."""
    return TcaHubDAO._get_views_with_shares("v.view_id = %s", view_id)

@staticmethod
def get_views_with_shares_by_owner_id(owner_id):
    """Fetch all views owned by a user, including their share details."""
    return TcaHubDAO._get_views_with_shares("v.owner_id = %s", owner_id)


--main
@app.get("/views/{view_id}/with-shares")
async def get_view_with_shares(view_id: int, dao: TcaHubDAO = Depends(get_dao)):
    logger.info(f"Fetching view with shares for {view_id}")
    view = dao.get_view_with_shares(view_id)
    if view:
        logger.info(f"Successfully fetched view with shares {view_id}")
        return view
    raise HTTPException(status_code=404, detail=f"View not found {view_id}")

@app.get("/views/owner/{owner_id}/with-shares")
async def get_views_with_shares_by_owner(owner_id: str, dao: TcaHubDAO = Depends(get_dao)):
    logger.info(f"Fetching all views with shares for owner {owner_id}")
    views = dao.get_views_with_shares_by_owner_id(owner_id)
    if views:
        logger.info(f"Retrieved {len(views)} views with shares for owner {owner_id}")
        return views
    raise HTTPException(status_code=404, detail=f"No views found for {owner_id}")

@app.delete("/views/{view_id}")
async def delete_view(view_id: int, dao: TcaHubDAO = Depends(get_dao)):
    logger.warning(f"Deleting view {view_id}. WARNING: This will also delete all associated shares!")
    
    success = dao.delete_view(view_id)
    
    if success:
        logger.info(f"Successfully deleted view {view_id} and its associated shares.")
        return {
            "message": "View successfully deleted. All associated shares have also been removed.",
            "view_id": view_id
        }
    
    raise HTTPException(status_code=404, detail=f"Issue deleting view {view_id}. It may not exist.")



