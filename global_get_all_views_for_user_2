def get_all_views_for_user(self, owner_id, groups):
    conn = self.get_db_connection()
    try:
        with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            # Owned views (excluding global shared ones)
            owned_views = TcaHubDAO._fetch_view_details_exclude_globals(cursor, owner_id)

            # Shared views — for user and groups
            shared_to_list = [owner_id] + groups
            shared_views_raw = TcaHubDAO._fetch_view_details(
                cursor,
                "vs.shared_to = ANY(%s)",
                (shared_to_list,)
            )

            # Global views — shared to ALL but not owned by the user
            global_views_raw = TcaHubDAO._fetch_view_details(
                cursor,
                "vs.shared_to = 'ALL' AND vs.target_type = 'GLOBAL' AND v.owner_id != %s",
                (owner_id,)
            )

            # Process shared views
            shared_views = []
            for view in shared_views_raw:
                if view.get("global_share"):
                    continue  # skip if somehow misclassified
                shared_views.append(view)

            # Process global views
            global_views = [view["global_share"] for view in global_views_raw if view.get("global_share")]

            return {
                "owned_views": owned_views,
                "shared_views": shared_views,
                "global_views": global_views
            }
    finally:
        self.release_db_connection(conn)


@staticmethod
def _fetch_view_details(cursor, where_clause, params):
    view_query = f"""
    SELECT v.view_id AS v_id, v.view_name, v.view_template, v.owner_id,
           v.created_at, v.updated_at, v.view_type,
           vs.shared_id, vs.shared_to, vs.target_type, vs.shared_at
    FROM tcahub_views v
    LEFT JOIN view_shares vs ON v.view_id = vs.view_id
    WHERE {where_clause}
    """
    cursor.execute(view_query, params)
    results = cursor.fetchall()

    if not results:
        return []

    views_with_shares = {}
    for row in results:
        view_id = row['v_id']
        if view_id not in views_with_shares:
            views_with_shares[view_id] = {
                'view_id': view_id,
                'view_name': row['view_name'],
                'view_template': row['view_template'],
                'owner_id': row['owner_id'],
                'created_at': row['created_at'],
                'updated_at': row['updated_at'],
                'view_type': row['view_type'],
                'shares': [],
                'global_share': None
            }

        if row['shared_id']:
            shared_to = row['shared_to']
            target_type = row['target_type']

            if shared_to == 'ALL':
                if target_type == 'GLOBAL':
                    encoded = generate_quid(
                        view_id=view_id,
                        shared_to=shared_to,
                        share_type=target_type,
                        shared_at=row['shared_at']
                    )
                    views_with_shares[view_id]['global_share'] = encoded
                continue  # skip ALL shares from normal shares
            else:
                share = {
                    'shared_id': row['shared_id'],
                    'shared_to': shared_to,
                    'target_type': target_type,
                    'shared_at': row['shared_at']
                }
                views_with_shares[view_id]['shares'].append(share)

    return list(views_with_shares.values())
