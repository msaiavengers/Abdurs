
zssh prca@lnpmsw2 'max_heap=0; zgrep -o "Heap: [0-9.]\+M" /v/campus/ln/appl/etl/logs/example.log.gz | while read -r heap_line; do value="${heap_line#Heap: }"; value="${value%M*}"; int_value="${value%%.*}"; frac_value="${value#*.}"; frac_value="${frac_value%%[0]*}"; [[ -z "$frac_value" ]] && [[ "$int_value" -gt "$max_heap" ]] && max_heap="$value" || { [[ "$int_value" -gt "$max_heap" ]] && max_heap="$value" || { [[ "$int_value" -eq "$max_heap" ]] && [[ "$frac_value" -gt "${max_heap#*.}" ]]; } }; done; echo "Max Heap: $max_heap M"'

zssh prca@lnpmsw2 'max_heap=0; zgrep -o "Heap: [0-9.]\+M" /v/campus/ln/appl/etl/logs/example.log.gz | while read -r heap_line; do value="${heap_line#Heap: }"; value="${value%M*}"; int_value="${value%%.*}"; frac_value="${value#*.}"; frac_value="${frac_value%%[0]*}"; if [[ -z "$frac_value" && "$int_value" -gt "$max_heap" ]] || { [[ -n "$frac_value" && "$int_value" -gt "$max_heap" ]] || { [[ -n "$frac_value" && "$int_value" -eq "$max_heap" ]] && [[ "$frac_value" -gt "${max_heap#*.}" ]]; }; }; then max_heap="$value"; fi; done; echo "Max Heap: $max_heap M"'


zssh prca@lnpmsw2 'max_heap=0; zgrep -o "Heap: [0-9.]\+M" /v/campus/ln/appl/etl/logs/example.log.gz | while read -r heap_line; do value="${heap_line#Heap: }"; value="${value%M*}"; int_value="${value%%.*}"; frac_value="${value#*.}"; frac_value="${frac_value%%[0]*}"; if [[ -z "$frac_value" && "$int_value" -gt "$max_heap" ]] || { [[ -n "$frac_value" && "$int_value" -gt "$max_heap" ]] || { [[ -n "$frac_value" && "$int_value" -eq "$max_heap" ]] && [[ "$frac_value" -gt "${max_heap#*.}" ]]; }; }; then max_heap="$value"; fi; done; echo "Max Heap: $max_heap M"'

zssh prca@lnpmsw2 'max_heap=0; zgrep -o "Heap: [0-9.]\+M" /v/campus/ln/appl/etl/logs/example.log.gz | while read -r heap_line; do value="${heap_line#Heap: }"; value="${value%M*}"; int_value="${value%%.*}"; frac_value="${value#*.}"; [[ "$frac_value" == "$value" ]] && (( int_value > max_heap )) || { [[ "$int_value" -gt "$max_heap" ]] && max_heap=$value; }; done; echo "Max Heap: $max_heap M"'

zssh prca@lnpmsw2 'max_heap=0; zgrep -o "Heap: [0-9.]\+M" /v/campus/ln/appl/etl/logs/example.log.gz | while read -r heap_line; do value="${heap_line#Heap: }"; value="${value%M*}"; int_value="${value%%.*}"; [[ "$int_value" =~ ^[0-9]+$ ]] && (( int_value > max_heap )) && max_heap=$value; done; echo "Max Heap: $max_heap M"'


zssh prca@lnpmsw2 'max_heap=0; zgrep -o "Heap: [0-9.]\+M" /v/campus/ln/appl/etl/logs/example.log.gz | while read -r heap_line; do value=${heap_line#"Heap: "}; value=${value%M*}; [[ "$value" =~ ^[0-9]+(\.[0-9]+)?$ ]] && (( $(echo "$value > $max_heap" | cut -d"." -f1) )) && max_heap=$value; done; echo "Max Heap: $max_heap M"'

zssh prca@lnpmsw2 'max_heap=0; zgrep -o "Heap: [0-9.]\+M" /v/campus/ln/appl/etl/logs/example.log.gz | while read -r heap_line; do value=${heap_line#"Heap: "}; value=${value%M*}; [[ "$value" =~ ^[0-9]+(\.[0-9]+)?$ ]] && (( $(echo "$value > $max_heap" | tr -d "\r" | cut -d"." -f1) )) && max_heap=$value; done; echo "Max Heap: $max_heap M"'



zssh prca@lnpmsw2 '
max_heap=0
zgrep -o "Heap: [0-9.]\+M" /v/campus/ln/appl/etl/logs/example.log.gz | while read -r heap_line; do 
  value=${heap_line#"Heap: "}  # Remove "Heap: "
  value=${value%M*}            # Remove "M"
  
  # Ensure value is a valid number
  if [[ "$value" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
    # Compare using Bash floating-point logic
    if (( $(echo "$value > $max_heap" | tr -d '\r' | cut -d'.' -f1) )); then 
      max_heap=$value
    fi
  fi
done
echo "Max Heap: $max_heap M"
'




zgrep -o "Heap: [0-9.]\+M" /v/campus/ln/appl/etl/logs/example.log.gz

zgrep -o "Heap: [0-9.]\+M" /v/campus/ln/appl/etl/logs/*.gz


zssh prca@lnpmsw2 'for f in /v/campus/ln/appl/etl/logs/*.gz; do process_name="${f##*/}"; process_name="${process_name%.log.gz}"; max_heap=0; while read -r heap_line; do value=${heap_line#"Heap: "}; value=${value%M*}; if [[ "$value" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then if [[ $(printf "%s\n%s" "$max_heap" "$value" | sort -g | tail -n1) == "$value" ]]; then max_heap=$value; fi; fi; done < <(zgrep -o "Heap: [0-9.]\+M" "$f"); if [[ $max_heap != 0 ]]; then echo "$process_name: $max_heap M"; fi; done | sort -r -t: -k2,2n'




for f in /path/to/logs/*.gz; do process_name="${f##*/}"; process_name="${process_name%.log.gz}"; max_heap=0; while read -r heap_line; do value=${heap_line#"Heap: "}; value=${value%M*}; if [[ $value =~ ^[0-9]+(\.[0-9]+)?$ ]]; then if [[ $(echo "$max_heap < $value" | tr -d '\r' | sort -g | tail -n1) == "$value" ]]; then max_heap=$value; fi; fi; done < <(zgrep -o "Heap: [0-9.]\+M" "$f"); if [[ $max_heap != 0 ]]; then echo "$process_name: $max_heap M"; fi; done | sort -r -t: -k2,2n

retricted on sing basename so use above
for f in /path/to/logs/*.gz; do process_name=$(basename "$f" .log.gz); max_heap=0; while read -r heap_line; do value=${heap_line#"Heap: "}; value=${value%M*}; if [[ $(echo "$value" | grep -c '\.') -gt 0 ]]; then max_heap=$(printf "%.6f\n%s\n" "$max_heap" "$value" | sort -g | tail -n1); else if [[ $value -gt $max_heap ]]; then max_heap=$value; fi; fi; done < <(zgrep -o "Heap: [0-9.]\+M" "$f"); if [[ $max_heap != 0 ]]; then echo "$process_name: $max_heap M"; fi; done | sort -r -t: -k2,2n


oneliner  we cant use /bin/bc so use above
for f in /path/to/logs/*.gz; do process_name=$(basename "$f" .log.gz); max_heap=0; while read -r heap_line; do value=${heap_line#"Heap: "}; value=${value%M*}; if (( $(echo "$value > $max_heap" | bc -l) )); then max_heap=$value; fi; done < <(zgrep -o "Heap: [0-9.]\+M" "$f"); if (( $(echo "$max_heap > 0" | bc -l) )); then echo "$process_name: $max_heap M"; fi; done | sort -r -t: -k2,2n

# Process each gzipped log file
for f in /path/to/logs/*.gz; do
  # Get the filename as process identifier
  process_name=$(basename "$f" .log.gz)
  
  # Create an empty variable to track the maximum
  max_heap=0
  
  # Extract heap values and find the maximum
  while read -r heap_line; do
    # Extract just the numeric part and remove the 'M'
    value=${heap_line#"Heap: "}
    value=${value%M*}
    
    # Compare with current max
    if (( $(echo "$value > $max_heap" | bc -l) )); then
      max_heap=$value
    fi
  done < <(zgrep -o "Heap: [0-9.]\+M" "$f")
  
  # Only print if we found a value
  if [ "$max_heap" != "0" ]; then
    echo "$process_name: $max_heap M"
  fi
done | sort -r -t: -k2
