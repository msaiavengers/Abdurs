from fastapi import FastAPI, HTTPException, Depends
from pydantic import BaseModel
import logging
import os
import json
import time
import numpy as np
import psycopg2
from psycopg2.extras import RealDictCursor
from dotenv import load_dotenv
from tca_hub_dao import TcaHubDAO  # Import your DAO class

# Load environment variables
load_dotenv()

app = FastAPI()

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("/var/tmp/tcepy.log", mode="a"),
    ],
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Pydantic model for creating/updating a view
class ViewCreateRequest(BaseModel):
    view_name: str
    view_template: dict  # JSON object
    owner_id: str
    view_type: str


class ViewUpdateRequest(BaseModel):
    view_id: int
    view_name: str = None
    view_template: dict = None
    view_type: str = None

class ShareViewRequest(BaseModel):
    view_id: int
    shared_to: str  # User or group
    target_type: str  # 'user' or 'group'

@app.post("/views/create")
async def create_view(request: ViewCreateRequest):
    try:
        view_id = TcaHubDAO.create_view(
            request.view_name, request.view_template, request.owner_id, request.view_type
        )
        return {"message": "View created successfully", "view_id": view_id}
    except Exception as e:
        logger.error(f"Error creating view: {str(e)}")
        raise HTTPException(status_code=500, detail="Error creating view")

@app.get("/views/{view_id}")
async def get_view(view_id: int):
    view = TcaHubDAO.get_view(view_id)
    if view:
        return view
    raise HTTPException(status_code=404, detail="View not found")

@app.get("/views/owner/{owner_id}")
async def get_views_by_owner(owner_id: str):
    return TcaHubDAO.get_views_by_owner(owner_id)

@app.put("/views/update")
async def update_view(request: ViewUpdateRequest):
    success = TcaHubDAO.update_view(request.view_id, request.view_name, request.view_template, request.view_type)
    if success:
        return {"message": "View updated successfully"}
    raise HTTPException(status_code=400, detail="Update failed or no changes detected")

@app.delete("/views/{view_id}")
async def delete_view(view_id: int):
    success = TcaHubDAO.delete_view(view_id)
    if success:
        return {"message": "View deleted successfully"}
    raise HTTPException(status_code=404, detail="View not found")

@app.post("/views/share")
async def share_view(request: ShareViewRequest):
    try:
        shared_id = TcaHubDAO.share_view(request.view_id, request.shared_to, request.target_type)
        return {"message": "View shared successfully", "shared_id": shared_id}
    except Exception as e:
        logger.error(f"Error sharing view: {str(e)}")
        raise HTTPException(status_code=500, detail="Error sharing view")

@app.get("/views/shared/{shared_to}")
async def get_shared_views(shared_to: str):
    return TcaHubDAO.get_shared_views(shared_to)

@app.delete("/views/share/delete")
async def delete_shares(view_id: int = None, share_id: int = None, share_to: str = None):
    success = TcaHubDAO.delete_shares_for_view(view_id=view_id, share_id=share_id, share_to=share_to)
    if success:
        return {"message": "Share(s) deleted successfully"}
    raise HTTPException(status_code=400, detail="No matching shares found")
