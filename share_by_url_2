### **Explanation of the Share Token (ShareLink)**:

A **share token** is a secure, encoded identifier that uniquely represents a shared resource—in this case, a **global view**. The purpose of the share token is to enable access to a specific view that has been shared publicly (with `shared_to = 'ALL'`) without revealing sensitive information like the `view_id` or the exact sharing details directly in the URL.

Here’s a breakdown of how the share token works:

---

### **1. What is Encoded in the Share Token**?

The share token is generated by encoding specific pieces of information about the shared view into a base64-encoded string. The components included in the token are:

1. **view_id**: The unique identifier of the view that has been shared.
2. **shared_to**: This is set to `"ALL"` for global shares to indicate the view is shared with everyone.
3. **shared_at**: The timestamp indicating when the view was shared.

These pieces of information are concatenated into a single string with a delimiter (e.g., a pipe `|`), and then that string is encoded using **base64**.

### **2. Example of the Share Token Structure**:

Let’s assume the following data for a global share:

- **view_id**: 123
- **shared_to**: "ALL"
- **shared_at**: `2025-04-11T12:34:56`

The string before encoding would look like this:

```
123|ALL|2025-04-11T12:34:56
```

When we base64 encode this string, it would produce something like:

```
MTIzfEFMTHwyMDI1LTA0LTExVDEyOjM0OjU2
```

This is the **share token** (ShareLink).

### **3. Why Base64 Encoding?**

Base64 encoding is used for the following reasons:

- **Compact Representation**: The original string (e.g., `123|ALL|2025-04-11T12:34:56`) could be longer and might include special characters. Base64 encoding makes the string URL-safe and compact.
- **Security**: While Base64 encoding is not encryption, it obscures the actual data. In this case, it ensures that sensitive details (like the view's ID or timestamp) are not exposed directly in the URL.

However, **Base64 is reversible**, which means anyone who has the token can decode it back into the original data (view ID, shared-to information, and timestamp). For security, you may still implement access controls, e.g., ensuring that only valid tokens are accepted.

---

### **4. Share Token Usage**:

Once a view is shared, the token (ShareLink) can be sent to users or shared publicly. Here’s how the token is used:

1. **Sharing the View**:
   - The share token is generated and returned from the API after a global share is created (e.g., when a user shares a view with everyone via a URL).
   - The token is a URL-safe string that can be easily passed in a URL.

2. **Accessing the Shared View**:
   - When someone wants to access the shared view, they can visit an endpoint like `/views/by-url/{share_token}`.
   - The server decodes the share token to extract the `view_id`, `shared_to`, and `shared_at`.
   - The system checks whether the decoded `shared_to` is `"ALL"` (indicating it’s a global share), and then retrieves the view from the database.

   For example:
   ```
   GET /views/by-url/MTIzfEFMTHwyMDI1LTA0LTExVDEyOjM0OjU2
   ```

   The server decodes the token to access the relevant view information and returns the view to the user.

---

### **5. Security Considerations**:

While the share token is base64 encoded, **it is not encrypted**, so anyone who has access to the token can decode it. However, the token's value alone doesn’t guarantee access to the shared view—proper authorization checks are still required. For example:

- **Validation**: When decoding the share token, check if the `shared_to` is `"ALL"`. This ensures that only global shares can be accessed through the share token.
- **Access Control**: Additional access controls can be implemented on the backend to ensure that only valid tokens are processed.

---

### **6. Example Use Case**:

**Scenario**: A user wants to share a view publicly with everyone via a URL. They click a button on the UI to "Share by URL," and the following steps occur:

1. The backend creates a global share with `target_type = 'GLOBAL'` and `shared_to = 'ALL'`.
2. The backend generates a **share token** (e.g., `MTIzfEFMTHwyMDI1LTA0LTExVDEyOjM0OjU2`) for the shared view.
3. The backend returns the token to the UI, where it can be shared or embedded in a link (e.g., `https://example.com/views/by-url/MTIzfEFMTHwyMDI1LTA0LTExVDEyOjM0OjU2`).
4. Anyone with the link can use it to access the shared view, and the backend decodes the token to retrieve the view ID, shared time, and other details.

---

### **Summary of the Share Token Process**:

- The **share token** (ShareLink) is an encoded string that uniquely identifies a global share of a view.
- The token includes essential information (view ID, shared-to, timestamp) and is encoded in **Base64** for URL safety.
- The token allows users to securely access globally shared views, with the server decoding the token to retrieve the view's details.
- Proper security measures should be in place to validate and control access to views using the token.

---

This structure makes the sharing process more secure, flexible, and easier to manage, especially for globally shared resources.
