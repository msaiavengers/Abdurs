def get_fn_by_report_name(report_name):
    """ Maps report names to their corresponding functions. """
    reportFnMapping = {
        "GET_VIEW": handle_get_view,
        "GET_VIEWS_BY_OWNER": handle_get_views_by_owner,
        "UPDATE_VIEW": handle_update_view,
        "DELETE_VIEW": handle_delete_view,
        "SHARE_VIEW": handle_share_view,
        "GET_SHARED_VIEWS": handle_get_shared_views,
        "DELETE_SHARES": handle_delete_shares,
    }
    return reportFnMapping.get(report_name)


---- handlers
# persistence_handlers.py
from fastapi import HTTPException
from some_module import TcaHubDAO  # Ensure TcaHubDAO is properly imported
import logging

logger = logging.getLogger(__name__)

def handle_get_view(dao: TcaHubDAO, params: dict):
    """ Handles fetching a specific view by ID. """
    view_id = params.get("view_id")
    if view_id is None:
        raise HTTPException(status_code=400, detail="Missing view_id")
    view = dao.get_view(view_id)
    if view:
        return view
    raise HTTPException(status_code=404, detail="View not found")


def handle_get_views_by_owner(dao: TcaHubDAO, params: dict):
    """ Handles fetching views by owner ID. """
    owner_id = params.get("owner_id")
    if owner_id is None:
        raise HTTPException(status_code=400, detail="Missing owner_id")
    return dao.get_views_by_owner(owner_id)


def handle_update_view(dao: TcaHubDAO, params: dict):
    """ Handles updating a view. """
    required_keys = ["view_id", "view_name", "view_template", "view_type"]
    if not all(k in params for k in required_keys):
        raise HTTPException(status_code=400, detail="Missing required parameters")

    success = dao.update_view(
        params["view_id"],
        params["view_name"],
        params["view_template"],
        params["view_type"]
    )
    if success:
        return {"message": "View updated successfully"}
    raise HTTPException(status_code=400, detail="Update failed or no changes detected")


def handle_delete_view(dao: TcaHubDAO, params: dict):
    """ Handles deleting a view. """
    view_id = params.get("view_id")
    if view_id is None:
        raise HTTPException(status_code=400, detail="Missing view_id")
    success = dao.delete_view(view_id)
    if success:
        return {"message": "View deleted successfully"}
    raise HTTPException(status_code=404, detail="View not found")


def handle_share_view(dao: TcaHubDAO, params: dict):
    """ Handles sharing a view. """
    required_keys = ["view_id", "shared_to", "target_type"]
    if not all(k in params for k in required_keys):
        raise HTTPException(status_code=400, detail="Missing required parameters")

    try:
        shared_id = dao.share_view(
            params["view_id"],
            params["shared_to"],
            params["target_type"]
        )
        return {"message": "View shared successfully", "shared_id": shared_id}
    except Exception as e:
        logger.error(f"Error sharing view: {str(e)}")
        raise HTTPException(status_code=500, detail="Error sharing view")


def handle_get_shared_views(dao: TcaHubDAO, params: dict):
    """ Handles fetching shared views for a specific user/group. """
    shared_to = params.get("shared_to")
    if shared_to is None:
        raise HTTPException(status_code=400, detail="Missing shared_to")
    return dao.get_shared_views(shared_to)


def handle_delete_shares(dao: TcaHubDAO, params: dict):
    """ Handles deleting shares. """
    success = dao.delete_shares_for_view(
        view_id=params.get("view_id"),
        share_id=params.get("share_id"),
        share_to=params.get("share_to")
    )
    if success:
        return {"message": "Share(s) deleted successfully"}
    raise HTTPException(status_code=400, detail="No matching shares found")


---main.py
@app.get("/views/{view_id}")
async def get_view(view_id: int, dao: TcaHubDAO = Depends(get_dao)):
    return handle_get_view(dao, {"view_id": view_id})


@app.get("/views/owner/{owner_id}")
async def get_views_by_owner(owner_id: str, dao: TcaHubDAO = Depends(get_dao)):
    return handle_get_views_by_owner(dao, {"owner_id": owner_id})


@app.put("/views/update")
async def update_view(request: ViewUpdateRequest, dao: TcaHubDAO = Depends(get_dao)):
    return handle_update_view(dao, request.model_dump())  # Convert Pydantic model to dict


@app.delete("/views/{view_id}")
async def delete_view(view_id: int, dao: TcaHubDAO = Depends(get_dao)):
    return handle_delete_view(dao, {"view_id": view_id})


@app.post("/views/share")
async def share_view(request: ShareViewRequest, dao: TcaHubDAO = Depends(get_dao)):
    return handle_share_view(dao, request.model_dump())  # Convert Pydantic model to dict


@app.get("/views/shared/{shared_to}")
async def get_shared_views(shared_to: str, dao: TcaHubDAO = Depends(get_dao)):
    return handle_get_shared_views(dao, {"shared_to": shared_to})


@app.delete("/views/share/delete")
async def delete_shares(
    view_id: int = None, share_id: int = None, share_to: str = None, dao: TcaHubDAO = Depends(get_dao)
):
    return handle_delete_shares(dao, {"view_id": view_id, "share_id": share_id, "share_to": share_to})

