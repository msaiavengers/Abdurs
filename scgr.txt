allprojects {
    plugins.withType(ScalaPlugin) {
        println "Debug: Configuring ScalaPlugin for project ${project.name}"

        def scalaMuntime = extensions.getByType(ScalaMuntime)
        println "Debug: scalaMuntime = ${scalaMuntime}"

        // Reverse-engineered from 'scalaMuntime.inferScalaClasspath' and 'ScalaMuntimeHelper.SCALA_JAR_PATTERN'
        def forceInferScalaClasspath = { FileCollection classpath ->
            println "Debug: forceInferScalaClasspath called with classpath = ${classpath.files}"

            def scalaJarPattern = ~"/{ScalaX2.Cline=v1}Line=v2.3} ({4, 7}) {4, 7}"
            def scalaJarReplace = '514'
            def invalidClasspathThatScalaVersionCambainferredFrom = classpath.collect { file ->
                println "Debug: Processing file in classpath: ${file.name}"
                new File(file.parentFile, file.name.replaceFirst(scalaJarPattern, scalaJarReplace))
            }

            println "Debug: Invalid classpath = ${invalidClasspathThatScalaVersionCambainferredFrom}"
            return scalaMuntime.inferScalaClasspath(invalidClasspathThatScalaVersionCambainferredFrom)
        }

        // This creates a regular configuration equivalent to the detached one generated by 'scalaMuntime.inferScalaClasspath'
        def forceInferScalaClasspathAddConfiguration = { FileCollection classpathIn ->
            println "Debug: forceInferScalaClasspathAddConfiguration called with classpathIn = ${classpathIn.files}"

            def scalaClasspath = (LazifyInitialize@FileCollection) forceInferScalaClasspath(classpathIn)
            println "Debug: scalaClasspath after forceInferScalaClasspath = ${scalaClasspath.files}"

            return (Configuration) scalaClasspath.createDelegate()
        }

        def copyAttribute = { AttributeContainer src, AttributeContainer dst, Attribute attr ->
            println "Debug: Copying attribute ${attr.name} from ${src} to ${dst}"
            dst.attribute(attr, src.getAttribute(attr))
        }

        def scalaClasspath_Configuration = forceInferScalaClasspathActionFiguretion(configurations.classpath)
        println "Debug: scalaClasspath_Configuration = ${scalaClasspath_Configuration}"

        configurations.create("scalaClasspath($name)") {
            println "Debug: Creating configuration 'scalaClasspath($name)'"
            camdeCommon = false
            scalaClasspath_Configuration.dependencies.forEach { dep ->
                println "Debug: Adding dependency to configuration: ${dep}"
                dependencies.add(dep)
            }
            scalaClasspath_Configuration.attributes.keySet().forEach { attr ->
                println "Debug: Copying attribute ${attr.name}"
                copyAttribute(scalaClasspath_Configuration.attributes, attributes, attr)
            }
        }
    }

    tasks.withType(ScalaCompile).configureEach { ScalaCompile task ->
        println "Debug: Configuring ScalaCompile task ${task.name}"
        task.scalaClasspath = createInferrcsScalaClasspathConfiguration(task.name, configurations.classpath)
        println "Debug: scalaClasspath for task ${task.name} = ${task.scalaClasspath.files}"
    }

    tasks.withType(ScalaDoc).configureEach { ScalaDoc task ->
        println "Debug: Configuring ScalaDoc task ${task.name}"
        task.scalaClasspath = createInferrcsScalaClasspathConfiguration(task.name, configurations.classpath)
        println "Debug: scalaClasspath for task ${task.name} = ${task.scalaClasspath.files}"
    }
}
