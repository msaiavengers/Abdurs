neded exsacpe inner quotes

{
    "reportName": "GET_ALL_VIEWS_BY_OWNER_ID_AND_OPTIONAL_GROUPS",
    "reportParams": "{\"Param\": [{\"name\": \"owner_id\", \"value\": \"user_123\"}, {\"name\": \"groups\", \"value\": \"[\\\"trading_team\\\", \\\"risk_group\\\"]\"}]}"
}




{
    "reportName": "GET_ALL_VIEWS_BY_OWNER_ID_AND_OPTIONAL_GROUPS",
    "reportParams": "{\"Param\": [{\"name\": \"owner_id\", \"value\": \"user_123\"}, {\"name\": \"groups\", \"value\": \"[\"trading_team\", \"risk_group\"]\"}]}"
}


{
    "reportName": "GET_ALL_VIEWS_BY_OWNER_ID_AND_OPTIONAL_GROUPS",
    "reportParams": "{\"Param\": [{\"name\": \"owner_id\", \"value\": \"user_123\"}]}"
}


def parse_report_params(report_params):
    # Flatten Params Name, Value to a simple Dictionary
    parsed_report_params = {}

    # Check if report_params is a list (e.g., for cases where 'Param' is a list)
    if isinstance(report_params, list):
        for param in report_params:
            try:
                # This will parse 'value' if it is a stringified JSON or integer
                parsed_report_params[param['name']] = json.loads(param['value']) if isinstance(param['value'], str) else param['value']
            except ValueError:
                # If it's not a JSON string, just store it as-is
                parsed_report_params[param['name']] = param['value']
    
    # Check if it's a dictionary (standard case for other parameters)
    elif isinstance(report_params, dict):
        for key, value in report_params.items():
            parsed_report_params[key] = value
    
    return parsed_report_params




{
    "reportName": "GET_VIEW_BY_VIEW_ID",
    "reportParams": "{\"Param\":[{\"name\":\"view_id\",\"value\":123}]}"
}

{
    "reportName": "GET_VIEW_BY_VIEW_ID",
    "reportParams": {
        "Param": [
            {
                "name": "view_id",
                "value": "123"
            }
        ]
    }
}


{
    "reportName": "GET_VIEW_BY_VIEW_ID",
    "reportParams": "{\"Param\": {\"view_id\": 123}}"
}


from fastapi import FastAPI, Depends
from pydantic import BaseModel
from fastapi.requests import Request

app = FastAPI()

class ReportRequest(BaseModel):
    reportName: str
    reportParams: str

# âœ… Swagger-Testable JSON-Based Endpoint
@app.post("/runReportSwagger")
async def runKdbFnSwaggerTestable(
    form: ReportRequest, 
    dao: TcaHubDAO = Depends(get_dao)
):
    # Simulate the form data dependency
    fake_form = {"reportName": form.reportName, "reportParams": form.reportParams}
    return await runKdbFn(fake_form, dao)

# ðŸš¨ Keep This Untouched!
@app.post("/runReport")
async def runKdbFn(form=Depends(get_form_data), dao: TcaHubDAO = Depends(get_dao)):
    return {"reportName": form["reportName"], "reportParams": form["reportParams"]}
