
@app.get("/views/shared")
async def get_shared_views_for_user_or_group(
    shared_to: List[str] = Query(None, description="List of users or groups to get shared views for"),
    dao: TcaHubDAO = Depends(get_dao)
):
    """
    Get views that have been shared with the specified user or groups.
    """
    try:
        # Default to empty list if None
        shared_to_list = shared_to or []
        
        print(f"Finding shared views for {shared_to_list}")
        
        # Make sure we're passing a list, even if there's only one value
        if shared_to_list and not isinstance(shared_to_list, list):
            shared_to_list = [shared_to_list]
            
        shared_views = dao.get_shared_views_for_user_or_group(shared_to_list)
        return {"shared_views": shared_views}
    except Exception as e:
        logger.error(f"Error fetching shared views: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error fetching shared views: {str(e)}")

✅ Ensures the view exists before copying.
✅ Inserts a new entry with new_owner_id but keeps the original details.
✅ Updates timestamps (created_at and updated_at) for the new copy.
✅ Returns new_view_id, so the UI can refresh and display the copied version.
@staticmethod
def create_user_copy_of_shared_view(view_id, new_owner_id):
    """Creates a personal copy of a shared view for a user."""
    with TcaHubDAO.get_db_connection() as conn:
        with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            # Check if the view still exists before copying
            cursor.execute("SELECT * FROM tcahub_views WHERE view_id = %s;", (view_id,))
            original_view = cursor.fetchone()
            
            if not original_view:
                raise ValueError(f"View {view_id} no longer exists.")  # Handle error gracefully

            # Create a new copy with the new owner
            cursor.execute("""
                INSERT INTO tcahub_views (view_name, view_template, owner_id, type, created_at, updated_at)
                VALUES (%s, %s, %s, %s, NOW(), NOW()) RETURNING view_id;
            """, (original_view['view_name'], original_view['view_template'], new_owner_id, original_view['type']))
            
            new_view_id = cursor.fetchone()[0]
            conn.commit()

            return new_view_id


@staticmethod
def get_shared_views_for_user_or_group(shared_to_list):
    """Fetch views shared with a specific user or any of the groups they belong to."""
    with TcaHubDAO.get_db_connection() as conn:
        with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            cursor.execute("""
                SELECT v.*
                FROM tcahub_views v
                JOIN view_shares vs ON v.view_id = vs.view_id
                WHERE vs.shared_to = ANY(%s);
            """, (shared_to_list,))
            return cursor.fetchall()


Accepts a list (shared_to_list) instead of a single shared_to value.
Uses ANY(%s) in the SQL query to check if vs.shared_to matches any value in the list.
Now, the frontend can send both:
The user's shortid
The group names they belong to
Example Input:
python
Copy
Edit
shared_to_list = ['user_123', 'trading_team', 'risk_group']


@staticmethod
def create_user_copy_of_shared_view(view_id, new_owner_id):
    """Create a new view entry for a user when they modify a shared view."""
    with TcaHubDAO.get_db_connection() as conn:
        with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            cursor.execute("""
                INSERT INTO tcahub_views (view_name, view_template, owner_id, type)
                SELECT view_name, view_template, %s, type
                FROM tcahub_views
                WHERE view_id = %s
                RETURNING *;
            """, (new_owner_id, view_id))
            conn.commit()
            return cursor.fetchone()

 optimize API calls, you could create a single method that fetches both owned and shared views in one query, something like

@staticmethod
def get_all_views_for_user(owner_id, groups):
    """Fetch all views owned by the user and views shared with them or their groups."""
    with TcaHubDAO.get_db_connection() as conn:
        with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            query = """
                SELECT v.*
                FROM tcahub_views v
                LEFT JOIN view_shares vs ON v.view_id = vs.view_id
                WHERE v.owner_id = %s OR vs.shared_to = ANY(%s);
            """
            cursor.execute(query, (owner_id, groups))
            return cursor.fetchall()
